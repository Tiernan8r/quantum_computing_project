
@article{barenco_elementary_1995,
	title = {Elementary gates for quantum computation},
	volume = {52},
	issn = {1050-2947, 1094-1622},
	url = {http://arxiv.org/abs/quant-ph/9503016},
	doi = {10.1103/PhysRevA.52.3457},
	abstract = {We show that a set of gates that consists of all one-bit quantum gates (U(2)) and the two-bit exclusive-or gate (that maps Boolean values \$(x,y)\$ to \$(x,x {\textbackslash}oplus y)\$) is universal in the sense that all unitary operations on arbitrarily many bits \$n\$ (U(\$2{\textasciicircum}n\$)) can be expressed as compositions of these gates. We investigate the number of the above gates required to implement other gates, such as generalized Deutsch-Toffoli gates, that apply a specific U(2) transformation to one input bit if and only if the logical {AND} of all remaining input bits is satisfied. These gates play a central role in many proposed constructions of quantum computational networks. We derive upper and lower bounds on the exact number of elementary gates required to build up a variety of two-and three-bit quantum gates, the asymptotic number required for \$n\$-bit Deutsch-Toffoli gates, and make some observations about the number required for arbitrary \$n\$-bit unitary operations.},
	pages = {3457--3467},
	number = {5},
	journaltitle = {Phys. Rev. A},
	author = {Barenco, A. and Bennett, C. H. and Cleve, R. and {DiVincenzo}, D. P. and Margolus, N. and Shor, P. and Sleator, T. and Smolin, J. and Weinfurter, H.},
	urldate = {2022-03-02},
	date = {1995-11-01},
	eprinttype = {arxiv},
	eprint = {quant-ph/9503016},
	keywords = {Condensed Matter, High Energy Physics - Theory, Quantum Physics},
}

@online{noauthor_lecture_nodate,
	title = {Lecture Slides – Quantum Computing Project (2021-2022)[...},
	url = {https://www.learn.ed.ac.uk/webapps/blackboard/execute/content/file?cmd=view&content_id=_6912117_1&course_id=_88488_1},
	urldate = {2022-03-19},
}

@inreference{noauthor_unitary_2022,
	title = {Unitary matrix},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://en.wikipedia.org/w/index.php?title=Unitary_matrix&oldid=1077690707},
	abstract = {In linear algebra, a complex square matrix U is unitary if its conjugate transpose U* is also its inverse, that is, if

where I is the identity matrix.
In physics, especially in quantum mechanics, the conjugate transpose is referred to as the Hermitian adjoint of a matrix and is denoted by a dagger (†), so the equation above is written

The real analogue of a unitary matrix is an orthogonal matrix. Unitary matrices have significant importance in quantum mechanics because they preserve norms, and thus, probability amplitudes.},
	booktitle = {Wikipedia},
	urldate = {2022-03-19},
	date = {2022-03-17},
	langid = {english},
	note = {Page Version {ID}: 1077690707},
}

@online{voorhoede_pauli-x_nodate,
	title = {Pauli-X gate},
	url = {https://www.quantum-inspire.com/kbase/pauli-x/},
	abstract = {Repository containing the front-end of the Quantum Inspire project. The projects consists of an in-browser editor that allows the user to write and run/simulate quantum algorithms written in {QASM}. Also, users can access information about quantum computing concepts.},
	titleaddon = {Quantum Inspire},
	author = {Voorhoede, De},
	urldate = {2022-03-19},
	langid = {english},
}

@online{noauthor_quantum_nodate,
	title = {Quantum logic gate - Wikipedia},
	url = {https://en.wikipedia.org/wiki/Quantum_logic_gate},
	urldate = {2022-03-19},
}

@online{noauthor_grovers_nodate,
	title = {Grover's Algorithm},
	url = {https://community.qiskit.org/textbook/ch-algorithms/grover.html},
	abstract = {A university quantum algorithms/computation course supplement based on Qiskit},
	urldate = {2022-03-19},
	langid = {english},
}

@book{nielsen_quantum_2010,
	location = {Cambridge ; New York},
	edition = {10th anniversary ed},
	title = {Quantum computation and quantum information},
	isbn = {978-1-107-00217-3},
	pagetotal = {676},
	publisher = {Cambridge University Press},
	author = {Nielsen, Michael A. and Chuang, Isaac L.},
	date = {2010},
	keywords = {Quantum computers},
}

@inreference{noauthor_grovers_2022,
	title = {Grover's algorithm},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://en.wikipedia.org/w/index.php?title=Grover%27s_algorithm&oldid=1075073481},
	abstract = {In quantum computing, Grover's algorithm, also known as the quantum search algorithm, refers to a quantum algorithm for unstructured search that finds with high probability the unique input to a black box function that produces a particular output value, using just 
  
    
      
        O
        (
        
          
            N
          
        
        )
      
    
    \{{\textbackslash}displaystyle O(\{{\textbackslash}sqrt \{N\}\})\}
   evaluations of the function, where 
  
    
      
        N
      
    
    \{{\textbackslash}displaystyle N\}
   is the size of the function's domain. It was devised by Lov Grover in 1996.The analogous problem in classical computation cannot be solved in fewer than 
  
    
      
        O
        (
        N
        )
      
    
    \{{\textbackslash}displaystyle O(N)\}
   evaluations (because, on average, one has to check half of the domain to get a 50\% chance of finding the right input). Charles H. Bennett, Ethan Bernstein, Gilles Brassard, and Umesh Vazirani proved that any quantum solution to the problem needs to evaluate the function 
  
    
      
        O
        (
        
          
            N
          
        
        )
      
    
    \{{\textbackslash}displaystyle O(\{{\textbackslash}sqrt \{N\}\})\}
   times, so Grover's algorithm is asymptotically optimal. Since researchers generally believe that {NP}-complete problems are difficult because their search spaces have essentially no structure, the optimality of Grover's algorithm for unstructured search suggests (but does not prove) that quantum computers cannot solve {NP}-complete problems in polynomial time.Unlike other quantum algorithms, which may provide exponential speedup over their classical counterparts, Grover's algorithm provides only a quadratic speedup. However, even quadratic speedup is considerable when 
  
    
      
        N
      
    
    \{{\textbackslash}displaystyle N\}
   is large, and Grover's algorithm can be applied to speed up broad classes of algorithms. Grover's algorithm could brute-force a 128-bit symmetric cryptographic key in roughly 264 iterations, or a 256-bit key in roughly 2128 iterations. As a result, it is sometimes suggested that symmetric key lengths be doubled to protect against future quantum attacks.},
	booktitle = {Wikipedia},
	urldate = {2022-03-19},
	date = {2022-03-03},
	langid = {english},
	note = {Page Version {ID}: 1075073481},
}

@online{hui_qc_2019,
	title = {{QC} — Grover’s algorithm},
	url = {https://jonathan-hui.medium.com/qc-grovers-algorithm-cd81e61cf248},
	abstract = {Quantum algorithms involves a lot of Math. Let’s check out another famous algorithm and explain it graphically.},
	titleaddon = {Medium},
	author = {Hui, Jonathan},
	urldate = {2022-03-19},
	date = {2019-04-28},
	langid = {english},
}

@article{de_wolf_main_nodate,
	title = {Main Quantum Algorithms: Shor and Grover},
	pages = {23},
	author = {de Wolf, Ronald},
	langid = {english},
}

@article{j_quantum_2020,
	title = {Quantum Algorithm Implementations for Beginners},
	url = {http://arxiv.org/abs/1804.03719},
	abstract = {As quantum computers become available to the general public, the need has arisen to train a cohort of quantum programmers, many of whom have been developing classical computer programs for most of their careers. While currently available quantum computers have less than 100 qubits, quantum computing hardware is widely expected to grow in terms of qubit count, quality, and connectivity. This review aims to explain the principles of quantum programming, which are quite different from classical programming, with straightforward algebra that makes understanding of the underlying fascinating quantum mechanical principles optional. We give an introduction to quantum computing algorithms and their implementation on real quantum hardware. We survey 20 different quantum algorithms, attempting to describe each in a succinct and self-contained fashion. We show how these algorithms can be implemented on {IBM}'s quantum computer, and in each case, we discuss the results of the implementation with respect to differences between the simulator and the actual hardware runs. This article introduces computer scientists, physicists, and engineers to quantum algorithms and provides a blueprint for their implementations.},
	journaltitle = {{arXiv}:1804.03719 [quant-ph]},
	author = {J., Abhijith and Adedoyin, Adetokunbo and Ambrosiano, John and Anisimov, Petr and {BÃ}¤rtschi, Andreas and Casper, William and Chennupati, Gopinath and Coffrin, Carleton and Djidjev, Hristo and Gunter, David and Karra, Satish and Lemons, Nathan and Lin, Shizeng and Malyzhenkov, Alexander and Mascarenas, David and Mniszewski, Susan and Nadiga, Balu and O'Malley, Daniel and Oyen, Diane and Pakin, Scott and Prasad, Lakshman and Roberts, Randy and Romero, Phillip and Santhi, Nandakishore and Sinitsyn, Nikolai and Swart, Pieter J. and Wendelberger, James G. and Yoon, Boram and Zamora, Richard and Zhu, Wei and Eidenbenz, Stephan and Coles, Patrick J. and Vuffray, Marc and Lokhov, Andrey Y.},
	urldate = {2022-03-21},
	date = {2020-03},
	keywords = {Computer Science - Emerging Technologies, Quantum Physics},
}

@misc{noauthor_quantum_nodate-1,
	title = {Quantum Fourier Transform},
	url = {https://community.qiskit.org/textbook/ch-algorithms/quantum-fourier-transform.html},
	abstract = {A university quantum algorithms/computation course supplement based on Qiskit},
	urldate = {2022-03-20},
	langid = {english}
}

@online{noauthor_git_nodate,
	title = {Git},
	url = {https://git-scm.com/},
	urldate = {2022-03-22}
}

@online{noauthor_manifesto_nodate,
	title = {Manifesto for Agile Software Development},
	url = {https://agilemanifesto.org/},
	urldate = {2022-03-23}
}

@online{noauthor_git_nodate,
	title = {Git},
	url = {https://git-scm.com/},
	urldate = {2022-03-22}
}

@online{noauthor_build_nodate,
	title = {Build software better, together},
	url = {https://github.com},
	abstract = {{GitHub} is where people build software. More than 73 million people use {GitHub} to discover, fork, and contribute to over 200 million projects.},
	titleaddon = {{GitHub}},
	urldate = {2022-03-22},
	langid = {english}
}

@online{noauthor_apache_nodate,
	title = {Apache License, Version 2.0},
	url = {https://www.apache.org/licenses/LICENSE-2.0.html},
	urldate = {2022-03-23}
}

@online{noauthor_pep_nodate,
	title = {{PEP} 8: The Style Guide for Python Code},
	url = {https://pep8.org/},
	urldate = {2022-03-23}
}

@online{noauthor_overview_nodate,
	title = {Overview — Sphinx documentation},
	url = {https://www.sphinx-doc.org/en/master/},
	urldate = {2022-03-23}
}

@online{noauthor_welcome_nodate,
	title = {Welcome to the tox automation project — tox 3.24.6.dev13 documentation},
	url = {https://tox.wiki/en/latest/},
	urldate = {2022-03-23}
}

@online{noauthor_pytest_nodate,
	title = {pytest: helps you write better programs — pytest documentation},
	url = {https://docs.pytest.org/en/7.1.x/},
	urldate = {2022-03-23}
}

@online{noauthor_programming_nodate,
	title = {Programming Quantum Computers},
	url = {https://oreilly-qc.github.io/},
	urldate = {2022-03-23}
}